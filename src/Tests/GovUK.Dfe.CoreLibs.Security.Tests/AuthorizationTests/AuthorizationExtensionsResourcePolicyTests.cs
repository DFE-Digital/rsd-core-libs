using GovUK.Dfe.CoreLibs.Security.Authorization;
using GovUK.Dfe.CoreLibs.Security.Authorization.Requirements;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authorization.Infrastructure;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;

namespace GovUK.Dfe.CoreLibs.Security.Tests.AuthorizationTests
{
    public class AuthorizationExtensionsResourcePolicyTests
    {
        private static IServiceProvider BuildProviderWith(
            Action<ResourcePermissionOptions>? configureResourcePolicies,
            string? apiAuthScheme = null)
        {
            var services = new ServiceCollection();
            var config = new ConfigurationBuilder().Build();

            services.AddLogging();
            services.AddApplicationAuthorization(
                config,
                policyCustomizations: null,
                apiAuthenticationScheme: apiAuthScheme,
                configureResourcePolicies: configureResourcePolicies);

            return services.BuildServiceProvider();
        }

        [Fact]
        public void NoActions_NoAutoGeneratedPolicies()
        {
            var provider = BuildProviderWith(configureResourcePolicies: null);
            var opts = provider.GetRequiredService<IOptions<AuthorizationOptions>>().Value;

            // Should not have any "CanRead" policy by default
            Assert.Null(opts.GetPolicy("CanRead"));
            Assert.Null(opts.GetPolicy("CanWrite"));
        }

        [Fact]
        public void WithActions_GeneratesPoliciesWithCorrectRequirements_AndNoSchemes()
        {
            var provider = BuildProviderWith(opts =>
            {
                opts.Actions.AddRange(new[] { "Read", "Write" });
            });

            var authorizationOptions = provider
                .GetRequiredService<IOptions<AuthorizationOptions>>()
                .Value;

            // CanRead
            var read = authorizationOptions.GetPolicy("CanRead");
            Assert.NotNull(read);

            // Must require authenticated user
            Assert.Contains(read.Requirements, r =>
                r is DenyAnonymousAuthorizationRequirement);

            Assert.Contains(read.Requirements, r =>
                r is ResourcePermissionRequirement { Action: "Read", ClaimType: "permission" });

            Assert.Empty(read.AuthenticationSchemes);

            // CanWrite
            var write = authorizationOptions.GetPolicy("CanWrite");
            Assert.NotNull(write);

            Assert.Contains(write.Requirements, r =>
                r is DenyAnonymousAuthorizationRequirement);

            Assert.Contains(write.Requirements, r =>
                r is ResourcePermissionRequirement { Action: "Write", ClaimType: "permission" });

            Assert.Empty(write.AuthenticationSchemes);
        }


        [Fact]
        public void CustomClaimType_And_PolicyNameFormat_AreRespected()
        {
            var provider = BuildProviderWith(opts =>
            {
                opts.Actions.Add("Approve");
                opts.ClaimType = "my-perm";
                opts.PolicyNameFormat = "Allow{0}";
            });

            var authorizationOptions = provider.GetRequiredService<IOptions<AuthorizationOptions>>().Value;

            // New policy name = "AllowApprove"
            var policy = authorizationOptions.GetPolicy("AllowApprove");
            Assert.NotNull(policy);

            Assert.Contains(policy.Requirements, r =>
            {
                if (r is ResourcePermissionRequirement rr)
                    return rr is { Action: "Approve", ClaimType: "my-perm" };
                return false;
            });
        }

        [Fact]
        public void ApiAuthenticationScheme_IsAddedToPolicy_WhenProvided()
        {
            const string scheme = "MyApiScheme";
            var provider = BuildProviderWith(opts =>
            {
                opts.Actions.Add("Read");
            }, apiAuthScheme: scheme);

            var authorizationOptions = provider.GetRequiredService<IOptions<AuthorizationOptions>>().Value;
            var policy = authorizationOptions.GetPolicy("CanRead");
            Assert.NotNull(policy);

            Assert.Contains(scheme, policy.AuthenticationSchemes);
        }
    }
}
