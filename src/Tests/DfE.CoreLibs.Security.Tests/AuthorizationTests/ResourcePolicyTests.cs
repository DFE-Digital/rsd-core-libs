using System.Security.Claims;
using DfE.CoreLibs.Security.Authorization;
using DfE.CoreLibs.Security.Authorization.Handlers;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace DfE.CoreLibs.Security.Tests.AuthorizationTests
{
    public class ResourcePolicyTests
    {
        private readonly IAuthorizationService _authService;

        public ResourcePolicyTests()
        {
            var services = new ServiceCollection();
            var config = new ConfigurationBuilder().Build();

            services.AddLogging();
            services.AddApplicationAuthorization(
                config,
                configureResourcePolicies: opts =>
                {
                    opts.Actions.AddRange(["Read", "Write"]);
                });
            services.AddSingleton<IAuthorizationPolicyProvider, DefaultAuthorizationPolicyProvider>();
            services.AddSingleton<IAuthorizationHandler, ResourcePermissionHandler>();
            services.AddSingleton<IAuthorizationService, DefaultAuthorizationService>();

            _authService = services.BuildServiceProvider()
                             .GetRequiredService<IAuthorizationService>();
        }

        [Theory]
        [InlineData("Read")]
        [InlineData("Write")]
        public async Task AutoGeneratedPolicy_Succeeds_WhenMatchingClaim(string action)
        {
            var identity = new ClaimsIdentity(new[]
            {
                new Claim("permission", $"task1:{action}")
            }, authenticationType: "TestAuth");
            var user = new ClaimsPrincipal(identity);

            // Act
            var result = await _authService.AuthorizeAsync(user, "task1", $"Can{action}");
            Assert.True(result.Succeeded);
        }

        [Fact]
        public async Task AutoGeneratedPolicy_Fails_WhenNoMatchingClaim()
        {
            var user = new System.Security.Claims.ClaimsPrincipal();
            var result = await _authService.AuthorizeAsync(user, "task1", "CanRead");
            Assert.False(result.Succeeded);
        }
    }
}
