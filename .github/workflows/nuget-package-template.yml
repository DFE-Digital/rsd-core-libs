name: Build and Push NuGet Package Template

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
        description: "The name of the project"
      project_path:
        required: true
        type: string
        description: "The relative path to the project directory"
      nuget_package_name:
        required: true
        type: string
        description: "The name of the NuGet package"
      custom_suffix:
        required: false
        type: string
        default: ""

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Ensures it only runs on success
    permissions:
      packages: write
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Set up curl and jq
      run: sudo apt-get install -y curl jq

    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Add nuget package source
      run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/DFE-Digital/index.json"

    - name: Check for custom version in commit message or check the feed for the latest version and increment it
      id: check_custom_version
      run: |
        PROJECT_NAME=${{ inputs.project_name }} # Add the project name from inputs

        # Search the last 10 commits for the version update indicator
        COMMIT_HASH=$(git log -n 10 --pretty=format:"%H %s" | grep -P '\(%update '"$PROJECT_NAME"' package version to \d+\.\d+\.\d+\)' | grep -oP '^\w+' | head -n 1)

        if [[ -n "$COMMIT_HASH" ]]; then
          echo "Found commit with version update indicator: $COMMIT_HASH"
          # Create a project-specific tag using project name and commit hash
          TAG_NAME="${PROJECT_NAME}-processed-nuget-version-${COMMIT_HASH}"

          # Check if the commit is already tagged for this project
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "This commit has already been processed for version update in $PROJECT_NAME. Skipping."
          else
            # Extract the version from the commit message
            CUSTOM_VERSION=$(git show -s --format=%s $COMMIT_HASH | grep -oP '\(%update '"$PROJECT_NAME"' package version to \K([0-9]+\.[0-9]+\.[0-9]+)')

            if [[ -n "$CUSTOM_VERSION" ]]; then
              echo "Using custom version: $CUSTOM_VERSION"
              echo "NEW_VERSION=$CUSTOM_VERSION" >> $GITHUB_ENV

              # Tag the commit with the project-specific tag
              git tag "$TAG_NAME"
              git push origin "$TAG_NAME"
            else
              echo "Failed to extract version from commit message. Exiting."
              exit 1
            fi
          fi
        fi

        if [[ -z "$CUSTOM_VERSION" ]]; then
          echo "No unprocessed custom version found in the last 10 commits for $PROJECT_NAME. Proceeding to fetch and increment the latest version from the feed."

            CUSTOM_SUFFIX=${{ inputs.custom_suffix }}

            # Fetch the latest version and increment it for the specific package
            PACKAGE_ID="${{ inputs.nuget_package_name }}"
            FEED_URL="https://api.github.com/orgs/DFE-Digital/packages/nuget/$PACKAGE_ID/versions"

            ALL_VERSIONS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$FEED_URL" | jq -r 'if type == "array" then .[].name else empty end')

            if [[ -n "$ALL_VERSIONS" ]]; then

                echo "All Versions: ${ALL_VERSIONS:-None}"

                # Find the latest version with `-beta` suffix
                LATEST_BETA_VERSION=$(echo "$ALL_VERSIONS" | grep -E '\-beta$' | sort -V | tail -n 1)

                # Find the latest version without `-beta` suffix
                LATEST_PROD_VERSION=$(echo "$ALL_VERSIONS" | grep -vE '\-beta$' | sort -V | tail -n 1)

                # Log the versions we found
                echo "Latest beta version: ${LATEST_BETA_VERSION:-None}"
                echo "Latest production version: ${LATEST_PROD_VERSION:-None}"

                # Strip `-beta` from the beta version for comparison
                STRIPPED_BETA_VERSION=""
                if [[ -n "$LATEST_BETA_VERSION" ]]; then
                  STRIPPED_BETA_VERSION=$(echo "$LATEST_BETA_VERSION" | sed 's/-beta//')
                  echo "Stripped beta version: $STRIPPED_BETA_VERSION"
                fi

                if [[ -n "$CUSTOM_SUFFIX" ]]; then
                  # Scenario 2: PR Build (inputs.custom_suffix has a value)
                  echo "This is a PR build. Custom suffix is: $CUSTOM_SUFFIX"

                  if [[ -n "$LATEST_BETA_VERSION" ]]; then
                    # Increment the patch version of the latest beta
                    BASE_VERSION=$(echo "$LATEST_BETA_VERSION" | sed 's/-beta//')
                    IFS='.' read -r -a VERSION_PARTS <<< "$BASE_VERSION"
                    NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))$CUSTOM_SUFFIX"
                  else
                    # No beta version exists; use the latest production version
                    BASE_VERSION="$LATEST_PROD_VERSION"
                    IFS='.' read -r -a VERSION_PARTS <<< "$BASE_VERSION"
                    NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))$CUSTOM_SUFFIX"
                  fi

                  echo "New Pre-Release version: $NEW_VERSION"

                else
                  # Scenario 3: Push to Main (inputs.custom_suffix is empty)
                  echo "This is a push to main. Processing for production."

                  if [[ "$STRIPPED_BETA_VERSION" == "$LATEST_PROD_VERSION" ]]; then
                    # Beta matches production; increment patch version
                    BASE_VERSION="$LATEST_PROD_VERSION"
                    IFS='.' read -r -a VERSION_PARTS <<< "$BASE_VERSION"
                    NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))"
                    echo "Beta version matches production. Incrementing base version."
                  else
                    # Beta doesn't match production; promote beta to production
                    if [[ -n "$LATEST_BETA_VERSION" ]]; then
                      NEW_VERSION="$STRIPPED_BETA_VERSION"
                      echo "Promoting beta version to production."
                    else
                      # No beta version exists; increment production
                      BASE_VERSION="$LATEST_PROD_VERSION"
                      IFS='.' read -r -a VERSION_PARTS <<< "$BASE_VERSION"
                      NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))"
                      echo "No beta version exists. Incrementing production version."
                    fi
                  fi

                  echo "New production version: $NEW_VERSION"
                fi

            else

              echo "No versions found for package $PACKAGE_ID. Defaulting to 1.0.0."
              $NEW_VERSION="1.0.0"

            fi

          # Save the new version
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        fi

    - name: Build, pack and publish
      working-directory: ${{ inputs.project_path }}
      run: |
        dotnet build -c Release
        dotnet pack -c Release -p:PackageVersion=${{ env.NEW_VERSION }} --output .
        dotnet nuget push "*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/DFE-Digital/index.json

    - name: Get Release Note
      id: extract_description
      run: |
       # Retrieve the commit message body
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%b")
        
        # Check if the commit message is empty
        if [[ -z "$COMMIT_MESSAGE" ]]; then
          echo "No commit message found. Skipping release note extraction."
          DESCRIPTION="No release notes provided."
        else
          # Convert newlines in the commit message to a placeholder character (e.g., `~`)
          SINGLE_LINE_COMMIT=$(echo "$COMMIT_MESSAGE" | tr '\n' '~')
          
          # Extract release note content from the single-line commit message
          DESCRIPTION=$(echo "$SINGLE_LINE_COMMIT" | grep -oP '(?<=\(%release-note:)(.*?)(?=\s*%\))')
          
          # Replace the placeholder character `~` back with newlines
          DESCRIPTION=$(echo "$DESCRIPTION" | sed 's/~/\n/g')
          
          # Check if the description extraction found anything
          if [[ -z "$DESCRIPTION" ]]; then
            DESCRIPTION="No release notes provided."
          fi
        fi
    
        echo "RELEASE_DESCRIPTION<<EOF" >> $GITHUB_ENV
        echo "$DESCRIPTION" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create GitHub Release
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ inputs.nuget_package_name }}-${{ env.NEW_VERSION || '1.0.0' }}"

        gh release create "$TAG_NAME" \
        --title "Release ${{ env.NEW_VERSION }} for ${{ inputs.nuget_package_name }}" \
        --notes "${{ env.RELEASE_DESCRIPTION }}" \
        --draft=false \
        --prerelease=false