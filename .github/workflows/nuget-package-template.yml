name: Build and Push NuGet Package Template

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
        description: "The name of the project"
      project_path:
        required: true
        type: string
        description: "The relative path to the project directory"
      nuget_package_name:
        required: true
        type: string
        description: "The name of the NuGet package"

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Ensures it only runs on success
    permissions:
      packages: write
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Set up curl and jq
      run: sudo apt-get install -y curl jq

    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Check for custom version in commit message or check the feed for the latest version and increment it
      id: check_custom_version
      run: |
        PROJECT_NAME=${{ inputs.project_name }} # Add the project name from inputs

        # Search the last 10 commits for the version update indicator
        COMMIT_HASH=$(git log -n 10 --pretty=format:"%H %s" | grep -P '\(#update '"$PROJECT_NAME"' package version to \d+\.\d+\.\d+\)' | grep -oP '^\w+' | head -n 1)

        if [[ -n "$COMMIT_HASH" ]]; then
          echo "Found commit with version update indicator: $COMMIT_HASH"
          # Create a project-specific tag using project name and commit hash
          TAG_NAME="${PROJECT_NAME}-processed-nuget-version-${COMMIT_HASH}"

          # Check if the commit is already tagged for this project
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "This commit has already been processed for version update in $PROJECT_NAME. Skipping."
          else
            # Extract the version from the commit message
            CUSTOM_VERSION=$(git show -s --format=%s $COMMIT_HASH | grep -oP '\(#update '"$PROJECT_NAME"' package version to \K([0-9]+\.[0-9]+\.[0-9]+)')

            if [[ -n "$CUSTOM_VERSION" ]]; then
              echo "Using custom version: $CUSTOM_VERSION"
              echo "NEW_VERSION=$CUSTOM_VERSION" >> $GITHUB_ENV

              # Tag the commit with the project-specific tag
              git tag "$TAG_NAME"
              git push origin "$TAG_NAME"
            else
              echo "Failed to extract version from commit message. Exiting."
              exit 1
            fi
          fi
        fi

        if [[ -z "$CUSTOM_VERSION" ]]; then
          echo "No unprocessed custom version found in the last 10 commits for $PROJECT_NAME. Proceeding to fetch and increment the latest version from the feed."

          # Fetch the latest version and increment it for the specific package
          PACKAGE_ID="${{ inputs.nuget_package_name }}"
          FEED_URL="https://nuget.pkg.github.com/DFE-Digital/query?q=$PACKAGE_ID"
          LATEST_VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$FEED_URL" | jq -r '.data[0].version')

          if [[ -z "$LATEST_VERSION" || "$LATEST_VERSION" == "null" ]]; then
            echo "No existing version found in the feed. Defaulting to version 1.0.0"
            NEW_VERSION="1.0.0"
          else
            echo "Latest version is $LATEST_VERSION"
            IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_VERSION"
            NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))"
            echo "Incrementing to new version: $NEW_VERSION"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        fi

    - name: Build, pack and publish
      working-directory: ${{ inputs.project_path }}
      run: |
        dotnet build -c Release
        dotnet pack -c Release -p:PackageVersion=${{ env.NEW_VERSION }} --output .
        dotnet nuget push "*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/DFE-Digital/index.json

    - name: Get Release Note
      id: extract_description
      run: |
        # Extracts multiline release-note between (#release-note: and #)
        DESCRIPTION=$(git log -1 --pretty=format:"%b" | awk '/\(#release-note:/{flag=1; next} /#\)/{flag=0} flag')
    
        if [[ -z "$DESCRIPTION" ]]; then
          DESCRIPTION="No release notes provided."
        fi
    
        echo "RELEASE_DESCRIPTION<<EOF" >> $GITHUB_ENV
        echo "$DESCRIPTION" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create GitHub Release
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ inputs.nuget_package_name }}-${{ env.NEW_VERSION || '1.0.0' }}"

        gh release create "$TAG_NAME" \
        --title "Release ${{ env.NEW_VERSION }} for ${{ inputs.nuget_package_name }}" \
        --notes "${{ env.RELEASE_DESCRIPTION }}" \
        --draft=false \
        --prerelease=false